{"pageProps":{"post":{"attributes":{"description":"Explore performance optimization techniques in React with Brian Holt's course \"Intermediate React v6\" as you build a markdown previewer using artificial jank for testing. This segment covers creating MarkdownPreview.jsx and App.jsx, addressing rendering issues, and demonstrating the use of dangerouslySetInnerHTML to prevent XSS attacks.","keywords":["React","Brian Holt","web development","markdown previewer","performance optimization"]},"html":"<blockquote>\n<p>You will need to open the folder <code>perf</code> from the repo in your project.</p>\n<ul>\n<li><a href=\"https://github.com/btholt/irv6-project/tree/main/starter/perf\">The starter template</a></li>\n<li><a href=\"https://github.com/btholt/irv6-project/tree/main/completed/perf\">The completed project</a></li>\n</ul>\n</blockquote>\n<p>Let&#39;s open the <code>perf</code> project in our repo and run <code>npm install</code>.</p>\n<p>We&#39;re going to build a markdown previewer! On some laptops this can be pretty slow to parse and re-render to the DOM. On my laptop it&#39;s actually fast enough to get through it so we&#39;re going to introduce some artificial jank. Your computer may not need it.</p>\n<p>I left a long markdown file for you to use as a sample in markdownContent.js. I asked Claude to make some jokes for us. I&#39;d call it a middling success.</p>\n<p>Make a new file called MarkdownPreview.jsx. Put this in there</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">JANK_DELAY</span> = <span class=\"hljs-number\">100</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MarkdownPreview</span>(<span class=\"hljs-params\">{ render, options }</span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">expensiveRender</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> start = performance.<span class=\"hljs-title function_\">now</span>();\n    <span class=\"hljs-keyword\">while</span> (performance.<span class=\"hljs-title function_\">now</span>() - start &lt; <span class=\"hljs-variable constant_\">JANK_DELAY</span>) {}\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  };\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Last Render: {Date.now()}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;markdown-preview&quot;</span>\n        <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">__html:</span> <span class=\"hljs-attr\">render</span>(<span class=\"hljs-attr\">options.text</span>) }}\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">options.theme</span> }}\n      &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      {expensiveRender()}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><ul>\n<li>This is the artificial jank. It ties up the main thread so it&#39;ll run slower. Feel free to modify <code>JANK_DELAY</code>. Right now I have it delaying 100ms so you can see the jank more pronounced.</li>\n<li>I&#39;m also showing the time so can see how often the component runs.</li>\n<li><code>dangerouslySetInnerHTML</code> is fun. It just means you need to <em>really</em> trust what you&#39;re putting in there. If you just put raw user generated content in there, they could drop a script tag in there and do a good ol&#39; <a href=\"https://owasp.org/www-community/attacks/xss/\">XSS attack</a>. In this case the user can only XSS themself so that&#39;s fine enough.</li>\n</ul>\n<p>Okay, let&#39;s make our App.jsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { marked } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;marked&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MarkdownPreview</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./MarkdownPreview&quot;</span>;\n<span class=\"hljs-keyword\">import</span> markdownContent <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./markdownContent&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [text, setText] = <span class=\"hljs-title function_\">useState</span>(markdownContent);\n  <span class=\"hljs-keyword\">const</span> [time, setTime] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>());\n  <span class=\"hljs-keyword\">const</span> [theme, setTheme] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;green&quot;</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> interval = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setTime</span>(<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>());\n    }, <span class=\"hljs-number\">1000</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">clearInterval</span>(interval);\n  }, []);\n\n  <span class=\"hljs-keyword\">const</span> options = { text, theme };\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">render</span> = (<span class=\"hljs-params\">text</span>) =&gt; marked.<span class=\"hljs-title function_\">parse</span>(text);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Performance with React<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Current Time: {time}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">{</span>&quot;<span class=\"hljs-attr\">theme</span>&quot;}&gt;</span>\n        Choose a theme:\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{theme}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setTheme(e.target.value)}&gt;\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;green&quot;</span>&gt;</span>Green<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;blue&quot;</span>&gt;</span>Blue<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;red&quot;</span>&gt;</span>Red<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;yellow&quot;</span>&gt;</span>Yellow<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;markdown&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span>\n          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;markdown-editor&quot;</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{text}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setText(e.target.value)}\n        &gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MarkdownPreview</span> <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{options}</span> <span class=\"hljs-attr\">render</span>=<span class=\"hljs-string\">{render}</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><p>Alright, go play with it now (you may need to mess with the JANK_DELAY as well as the interval of how often the interval runs). The scroll is probably either janky or it has a hard time re-rendering. Typing in it should hard as well. Also notice that the current render. Re-rendering the theme is tough too.</p>\n<p>So how can we fix at least the scroll portion, as well make the other two a little less painful (as they&#39;ll only re-rendering once as opposed to continually.)</p>\n","markdown":"\n> You will need to open the folder `perf` from the repo in your project.\n>\n> - [The starter template][starter]\n> - [The completed project][completed]\n\nLet's open the `perf` project in our repo and run `npm install`.\n\nWe're going to build a markdown previewer! On some laptops this can be pretty slow to parse and re-render to the DOM. On my laptop it's actually fast enough to get through it so we're going to introduce some artificial jank. Your computer may not need it.\n\nI left a long markdown file for you to use as a sample in markdownContent.js. I asked Claude to make some jokes for us. I'd call it a middling success.\n\nMake a new file called MarkdownPreview.jsx. Put this in there\n\n```javascript\nconst JANK_DELAY = 100;\n\nexport default function MarkdownPreview({ render, options }) {\n  const expensiveRender = () => {\n    const start = performance.now();\n    while (performance.now() - start < JANK_DELAY) {}\n    return null;\n  };\n  return (\n    <div>\n      <h1>Last Render: {Date.now()}</h1>\n      <div\n        className=\"markdown-preview\"\n        dangerouslySetInnerHTML={{ __html: render(options.text) }}\n        style={{ color: options.theme }}\n      ></div>\n      {expensiveRender()}\n    </div>\n  );\n}\n```\n\n- This is the artificial jank. It ties up the main thread so it'll run slower. Feel free to modify `JANK_DELAY`. Right now I have it delaying 100ms so you can see the jank more pronounced.\n- I'm also showing the time so can see how often the component runs.\n- `dangerouslySetInnerHTML` is fun. It just means you need to _really_ trust what you're putting in there. If you just put raw user generated content in there, they could drop a script tag in there and do a good ol' [XSS attack][xss]. In this case the user can only XSS themself so that's fine enough.\n\nOkay, let's make our App.jsx\n\n```javascript\nimport { useEffect } from \"react\";\nimport { marked } from \"marked\";\nimport { useState } from \"react\";\n\nimport MarkdownPreview from \"./MarkdownPreview\";\nimport markdownContent from \"./markdownContent\";\n\nexport default function App() {\n  const [text, setText] = useState(markdownContent);\n  const [time, setTime] = useState(Date.now());\n  const [theme, setTheme] = useState(\"green\");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(Date.now());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const options = { text, theme };\n  const render = (text) => marked.parse(text);\n\n  return (\n    <div className=\"app\">\n      <h1>Performance with React</h1>\n      <h2>Current Time: {time}</h2>\n      <label htmlFor={\"theme\"}>\n        Choose a theme:\n        <select value={theme} onChange={(e) => setTheme(e.target.value)}>\n          <option value=\"green\">Green</option>\n          <option value=\"blue\">Blue</option>\n          <option value=\"red\">Red</option>\n          <option value=\"yellow\">Yellow</option>\n        </select>\n      </label>\n      <div className=\"markdown\">\n        <textarea\n          className=\"markdown-editor\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        ></textarea>\n        <MarkdownPreview options={options} render={render} />\n      </div>\n    </div>\n  );\n}\n```\n\nAlright, go play with it now (you may need to mess with the JANK_DELAY as well as the interval of how often the interval runs). The scroll is probably either janky or it has a hard time re-rendering. Typing in it should hard as well. Also notice that the current render. Re-rendering the theme is tough too.\n\nSo how can we fix at least the scroll portion, as well make the other two a little less painful (as they'll only re-rendering once as opposed to continually.)\n\n[xss]: https://owasp.org/www-community/attacks/xss/\n[starter]: https://github.com/btholt/irv6-project/tree/main/starter/perf\n[completed]: https://github.com/btholt/irv6-project/tree/main/completed/perf\n","slug":"the-project","title":"The Project","section":"Performance Optimizations","icon":"gauge-high","filePath":"/home/runner/work/intermediate-react-v6/intermediate-react-v6/lessons/05-performance-optimizations/B-the-project.md","nextSlug":"/lessons/performance-optimizations/fixing-it","prevSlug":"/lessons/performance-optimizations/where-react-can-be-slow"}},"__N_SSG":true}