{"pageProps":{"post":{"attributes":{"description":"Learn how to create a server component in React to display user-specific notes using SQLite, as part of the Intermediate React v6 course taught by Brian Holt for Frontend Masters. This lesson guides you through setting up a route to fetch and display notes for a logged-in user, leveraging async functions and server components.","keywords":["React","server components","SQLite","Brian Holt","Frontend Masters","web development","async functions"]},"html":"<p>So let&#39;s now do a server component where a user can read their own individual notes. This will look a lot like what we did with the no framework version!</p>\n<p>Make a folder inside the app directory called <code>my</code>. Inside that directory, put page.js. This will make the route /my where this page will show up.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AsyncDatabase</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;promised-sqlite3&quot;</span>;\n\n<span class=\"hljs-comment\">// this page assumes that you are logged in as user 1</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyNotes</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchNotes</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">AsyncDatabase</span>.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;./notes.db&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> fromPromise = db.<span class=\"hljs-title function_\">all</span>(\n      <span class=\"hljs-string\">&quot;SELECT n.id as id, n.note as note, f.name as from_user, t.name as to_user FROM notes n JOIN users f ON f.id = n.from_user JOIN users t ON t.id = n.to_user WHERE from_user = ?&quot;</span>,\n      [<span class=\"hljs-string\">&quot;1&quot;</span>]\n    );\n    <span class=\"hljs-keyword\">const</span> toPromise = db.<span class=\"hljs-title function_\">all</span>(\n      <span class=\"hljs-string\">&quot;SELECT n.id as id, n.note as note, f.name as from_user, t.name as to_user FROM notes n JOIN users f ON f.id = n.from_user JOIN users t ON t.id = n.to_user WHERE to_user = ?&quot;</span>,\n      [<span class=\"hljs-string\">&quot;1&quot;</span>]\n    );\n    <span class=\"hljs-keyword\">const</span> [<span class=\"hljs-keyword\">from</span>, to] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([fromPromise, toPromise]);\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-keyword\">from</span>,\n      to,\n    };\n  }\n\n  <span class=\"hljs-keyword\">const</span> notes = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetchNotes</span>();\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>My Notes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fieldset</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span>&gt;</span>Notes To You<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>From<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>To<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Note<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span>\n            {notes.to.map(({ id, note, from_user, to_user }) =&gt; (\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{from_user}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{to_user}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{note}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n            ))}\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fieldset</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fieldset</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span>&gt;</span>Notes From You<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>From<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>To<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Note<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span>\n            {notes.from.map(({ id, note, from_user, to_user }) =&gt; (\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{from_user}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{to_user}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{note}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n            ))}\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fieldset</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><ul>\n<li>We&#39;ve built this to essentially the user is always logged in as user 1, brian. Feel free afterwards to add your own auth and make it a full-fledged app. <a href=\"https://neon.tech/blog/neon-auth-is-here-get-authentication-in-a-couple-of-clicks\">Neon Auth</a> (which I helped build!) and <a href=\"https://clerk.com\">Clerk</a> are two great options here.</li>\n<li>It&#39;s an async function</li>\n<li>We&#39;re able to use the SQLite driver which is server-only normally</li>\n<li>Again, we don&#39;t have to say <code>&quot;use server&quot;;</code> because it&#39;s assumed that any component without &quot;use client&quot; is a server component</li>\n<li>Make sure to check out the network traffic! It&#39;s cool to see all the React Flight protocol stuff in action!</li>\n</ul>\n","markdown":"\nSo let's now do a server component where a user can read their own individual notes. This will look a lot like what we did with the no framework version!\n\nMake a folder inside the app directory called `my`. Inside that directory, put page.js. This will make the route /my where this page will show up.\n\n```javascript\nimport { AsyncDatabase } from \"promised-sqlite3\";\n\n// this page assumes that you are logged in as user 1\nexport default async function MyNotes() {\n  async function fetchNotes() {\n    const db = await AsyncDatabase.open(\"./notes.db\");\n    const fromPromise = db.all(\n      \"SELECT n.id as id, n.note as note, f.name as from_user, t.name as to_user FROM notes n JOIN users f ON f.id = n.from_user JOIN users t ON t.id = n.to_user WHERE from_user = ?\",\n      [\"1\"]\n    );\n    const toPromise = db.all(\n      \"SELECT n.id as id, n.note as note, f.name as from_user, t.name as to_user FROM notes n JOIN users f ON f.id = n.from_user JOIN users t ON t.id = n.to_user WHERE to_user = ?\",\n      [\"1\"]\n    );\n    const [from, to] = await Promise.all([fromPromise, toPromise]);\n    return {\n      from,\n      to,\n    };\n  }\n\n  const notes = await fetchNotes();\n\n  return (\n    <div>\n      <h1>My Notes</h1>\n      <fieldset>\n        <legend>Notes To You</legend>\n        <table>\n          <thead>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Note</th>\n            </tr>\n          </thead>\n          <tbody>\n            {notes.to.map(({ id, note, from_user, to_user }) => (\n              <tr key={id}>\n                <td>{from_user}</td>\n                <td>{to_user}</td>\n                <td>{note}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </fieldset>\n      <fieldset>\n        <legend>Notes From You</legend>\n        <table>\n          <thead>\n            <tr>\n              <th>From</th>\n              <th>To</th>\n              <th>Note</th>\n            </tr>\n          </thead>\n          <tbody>\n            {notes.from.map(({ id, note, from_user, to_user }) => (\n              <tr key={id}>\n                <td>{from_user}</td>\n                <td>{to_user}</td>\n                <td>{note}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </fieldset>\n    </div>\n  );\n}\n```\n\n- We've built this to essentially the user is always logged in as user 1, brian. Feel free afterwards to add your own auth and make it a full-fledged app. [Neon Auth][neon] (which I helped build!) and [Clerk][clerk] are two great options here.\n- It's an async function\n- We're able to use the SQLite driver which is server-only normally\n- Again, we don't have to say `\"use server\";` because it's assumed that any component without \"use client\" is a server component\n- Make sure to check out the network traffic! It's cool to see all the React Flight protocol stuff in action!\n\n[neon]: https://neon.tech/blog/neon-auth-is-here-get-authentication-in-a-couple-of-clicks\n[clerk]: https://clerk.com\n","slug":"server-components","title":"Server Components","section":"RSCs with Next.js","icon":"n","filePath":"/home/runner/work/intermediate-react-v6/intermediate-react-v6/lessons/04-rscs-with-nextjs/B-server-components.md","nextSlug":"/lessons/rscs-with-nextjs/server-actions","prevSlug":"/lessons/rscs-with-nextjs/abbreviated-intro-to-nextjs"}},"__N_SSG":true}