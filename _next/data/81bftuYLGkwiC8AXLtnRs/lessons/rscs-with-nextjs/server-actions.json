{"pageProps":{"post":{"attributes":{"description":"Learn how to create server actions in React using a backend function integration with forms, simplifying the process of managing form data in this lesson from Brian Holt's Intermediate React v6 course from Frontend Masters. This tutorial covers the implementation of server components to automatically handle data transport from frontend to backend without manual 'fetch' coding.","keywords":["React","server actions","frontend","backend","form integration","Brian Holt","Frontend Masters"]},"html":"<p>One of the most common interactions that users have with websites is some variation on submitting a form - whether that&#39;s a very traditional &quot;fill out this form and hit submit&quot; or something similar where the developer uses a form under the hood to handle inputs and then uses a submit event to fire off an API call.</p>\n<p>The React team leaned into this with a feature called server actions. You can essentially create an RSC that has an action on the form that will cause an action to fire on the server. It makes it really simple to hook up a frontend form and a backend function to process it. Let&#39;s first craft our form.</p>\n<p>Make a folder inside app called <code>write</code>. In there put page.js, so that we can have the route <code>/write</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AsyncDatabase</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;promised-sqlite3&quot;</span>;\n<span class=\"hljs-keyword\">import</span> postNote <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./postNote&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Write</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getUsers</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">AsyncDatabase</span>.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;./notes.db&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> db.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-string\">&quot;SELECT * FROM users&quot;</span>);\n  }\n  <span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getUsers</span>();\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fieldset</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;note-fieldset&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">legend</span>&gt;</span>Write a new note<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">legend</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{postNote}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;note-form&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n            From\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;from_user&quot;</span>&gt;</span>\n              {users.map((user) =&gt; (\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{user.id}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{user.id}</span>&gt;</span>\n                  {user.name}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n              ))}\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n            To\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">defaultValue</span>=<span class=\"hljs-string\">{2}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;to_user&quot;</span>&gt;</span>\n              {users.map((user) =&gt; (\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{user.id}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{user.id}</span>&gt;</span>\n                  {user.name}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n              ))}\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>\n            Note\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;note&quot;</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fieldset</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><p><code>&lt;form action={postNote} className=&quot;note-form&quot;&gt;</code> is the interesting part here. We&#39;re going to go code this up now but essentially it&#39;s allowing us to directly plug a backend function into the frontend form and React will take care of the transport of the data from frontend to backend. We get to skip writing all the <code>fetch</code> logic - React does it for us. We could have totally written this in the no-framework version of our app but it would have just been some extra steps in the server code. This is a React feature that Next.js implements.</p>\n<p>Let&#39;s go write postNote.js in the same directory.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-string\">&quot;use server&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AsyncDatabase</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;promised-sqlite3&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">postNote</span>(<span class=\"hljs-params\">formData</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;postNote called&quot;</span>, formData);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">from</span> = formData.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;from_user&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> to = formData.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;to_user&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> note = formData.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;note&quot;</span>);\n\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">from</span> || !to || !note) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;All fields are required&quot;</span>);\n  }\n\n  <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">AsyncDatabase</span>.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;./notes.db&quot;</span>);\n  <span class=\"hljs-keyword\">await</span> db.<span class=\"hljs-title function_\">run</span>(\n    <span class=\"hljs-string\">&quot;INSERT INTO notes (from_user, to_user, note) VALUES (?, ?, ?)&quot;</span>,\n    [<span class=\"hljs-keyword\">from</span>, to, note]\n  );\n}\n</code></pre><p><em>Now</em> we need the <code>&quot;use server&quot;;</code> directive at the top as this must be run on the server and we need to disambiguate that for React. Try commenting it out - the app will crash.</p>\n<p>Pretty cool, right? I love not having to write the whole API handshake code and just to have it written for me.</p>\n<p>Be sure to watch the network tab as well - it&#39;s cool to see the React Flight protocol handle it!</p>\n","markdown":"One of the most common interactions that users have with websites is some variation on submitting a form - whether that's a very traditional \"fill out this form and hit submit\" or something similar where the developer uses a form under the hood to handle inputs and then uses a submit event to fire off an API call.\n\nThe React team leaned into this with a feature called server actions. You can essentially create an RSC that has an action on the form that will cause an action to fire on the server. It makes it really simple to hook up a frontend form and a backend function to process it. Let's first craft our form.\n\nMake a folder inside app called `write`. In there put page.js, so that we can have the route `/write`.\n\n```javascript\nimport { AsyncDatabase } from \"promised-sqlite3\";\nimport postNote from \"./postNote\";\n\nexport default async function Write() {\n  async function getUsers() {\n    const db = await AsyncDatabase.open(\"./notes.db\");\n    return db.all(\"SELECT * FROM users\");\n  }\n  const users = await getUsers();\n\n  return (\n    <div>\n      <fieldset className=\"note-fieldset\">\n        <legend>Write a new note</legend>\n        <form action={postNote} className=\"note-form\">\n          <label>\n            From\n            <select name=\"from_user\">\n              {users.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          <label>\n            To\n            <select defaultValue={2} name=\"to_user\">\n              {users.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          <label>\n            Note\n            <textarea name=\"note\" />\n          </label>\n          <button type=\"submit\">Save</button>\n        </form>\n      </fieldset>\n    </div>\n  );\n}\n```\n\n`<form action={postNote} className=\"note-form\">` is the interesting part here. We're going to go code this up now but essentially it's allowing us to directly plug a backend function into the frontend form and React will take care of the transport of the data from frontend to backend. We get to skip writing all the `fetch` logic - React does it for us. We could have totally written this in the no-framework version of our app but it would have just been some extra steps in the server code. This is a React feature that Next.js implements.\n\nLet's go write postNote.js in the same directory.\n\n```javascript\n\"use server\";\nimport { AsyncDatabase } from \"promised-sqlite3\";\n\nexport default async function postNote(formData) {\n  console.log(\"postNote called\", formData);\n\n  const from = formData.get(\"from_user\");\n  const to = formData.get(\"to_user\");\n  const note = formData.get(\"note\");\n\n  if (!from || !to || !note) {\n    throw new Error(\"All fields are required\");\n  }\n\n  const db = await AsyncDatabase.open(\"./notes.db\");\n  await db.run(\n    \"INSERT INTO notes (from_user, to_user, note) VALUES (?, ?, ?)\",\n    [from, to, note]\n  );\n}\n```\n\n_Now_ we need the `\"use server\";` directive at the top as this must be run on the server and we need to disambiguate that for React. Try commenting it out - the app will crash.\n\nPretty cool, right? I love not having to write the whole API handshake code and just to have it written for me.\n\nBe sure to watch the network tab as well - it's cool to see the React Flight protocol handle it!\n","slug":"server-actions","title":"Server Actions","section":"RSCs with Next.js","icon":"n","filePath":"/home/runner/work/intermediate-react-v6/intermediate-react-v6/lessons/04-rscs-with-nextjs/C-server-actions.md","nextSlug":"/lessons/rscs-with-nextjs/server-and-client-components-together","prevSlug":"/lessons/rscs-with-nextjs/server-components"}},"__N_SSG":true}