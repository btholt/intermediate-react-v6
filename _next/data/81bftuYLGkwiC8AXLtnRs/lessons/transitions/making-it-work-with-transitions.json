{"pageProps":{"post":{"attributes":{"description":"Learn how to implement React's useTransition hook to manage UI transitions effectively during API requests, as taught in Brian Holt's Intermediate React v6 course for Frontend Masters.","keywords":["React","useTransition","API request","UI transitions","Brian Holt"]},"html":"<p>Luckily the useTransition code is only slightly more complex. Update <code>App.jsx</code>:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// add useTransition at top</span>\n<span class=\"hljs-keyword\">import</span> { useState, useTransition, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-comment\">// replace isPending useState</span>\n<span class=\"hljs-keyword\">const</span> [isPending, startTransition] = <span class=\"hljs-title function_\">useTransition</span>();\n\n<span class=\"hljs-comment\">// replace getNewScore</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getNewScore</span>(<span class=\"hljs-params\">game</span>) {\n  <span class=\"hljs-title function_\">setGame</span>(game);\n  <span class=\"hljs-title function_\">startTransition</span>(<span class=\"hljs-title function_\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">const</span> newScore = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getScore</span>(game);\n    <span class=\"hljs-title function_\">startTransition</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setScore</span>(newScore);\n    });\n  });\n}\n</code></pre><p>That&#39;s it!</p>\n<ul>\n<li>startTransition gives you back a isPending flag just like we had before.</li>\n<li>It now gives us a function to call that we&#39;re starting our UI transition. We&#39;re essentially signalling to React that we&#39;re starting some sort of transition (in our case, an API request and a subsequent UI render) that we could elect to interrupt with another transition.</li>\n<li>Why two <code>startTransition</code> calls? I struggled with this as well. It&#39;s in the React docs. It&#39;s because in theory React updates aren&#39;t instant. If you&#39;re a Facebook-sized app, a React update can actually be on the order tens if not hundreds of milliseconds which is forever in terms of code execution, and this means it needs to be captured this way so that the use could in theory interrupt it after the API request has returned but while React is re-rendering.</li>\n<li>I&#39;ll say <em>in this particular case</em> it&#39;s unnecessary, our app is tiny. But it&#39;s to make sure each transition is captured an atomic bit that can be interrupted.</li>\n</ul>\n","markdown":"\nLuckily the useTransition code is only slightly more complex. Update `App.jsx`:\n\n```javascript\n// add useTransition at top\nimport { useState, useTransition, useEffect } from \"react\";\n\n// replace isPending useState\nconst [isPending, startTransition] = useTransition();\n\n// replace getNewScore\nasync function getNewScore(game) {\n  setGame(game);\n  startTransition(async () => {\n    const newScore = await getScore(game);\n    startTransition(() => {\n      setScore(newScore);\n    });\n  });\n}\n```\n\nThat's it!\n\n- startTransition gives you back a isPending flag just like we had before.\n- It now gives us a function to call that we're starting our UI transition. We're essentially signalling to React that we're starting some sort of transition (in our case, an API request and a subsequent UI render) that we could elect to interrupt with another transition.\n- Why two `startTransition` calls? I struggled with this as well. It's in the React docs. It's because in theory React updates aren't instant. If you're a Facebook-sized app, a React update can actually be on the order tens if not hundreds of milliseconds which is forever in terms of code execution, and this means it needs to be captured this way so that the use could in theory interrupt it after the API request has returned but while React is re-rendering.\n- I'll say _in this particular case_ it's unnecessary, our app is tiny. But it's to make sure each transition is captured an atomic bit that can be interrupted.\n","slug":"making-it-work-with-transitions","title":"Making It Work with Transitions","section":"Transitions","icon":"shuffle","filePath":"/home/runner/work/intermediate-react-v6/intermediate-react-v6/lessons/06-transitions/D-making-it-work-with-transitions.md","nextSlug":"/lessons/optimistic-values/what-are-optimistic-values","prevSlug":"/lessons/transitions/making-it-work-without-transitions"}},"__N_SSG":true}