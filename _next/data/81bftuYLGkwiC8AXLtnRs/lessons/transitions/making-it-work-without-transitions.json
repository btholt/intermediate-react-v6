{"pageProps":{"post":{"attributes":{"description":"Learn about handling UI transitions and pending states in React applications with this practical example from Brian Holt's \"Intermediate React v6.\" This lesson provides code snippets for managing API requests and displaying scores using a \"Score\" component, focusing on user experience improvements during data fetching.","keywords":["React","UI transitions","pending states","Brian Holt","FrontEnd Masters","JavaScript","Intermediate React"]},"html":"<p>Let&#39;s first make this &quot;wrong&quot; first - the problem where the UI locks up during transitional times.</p>\n<p>Let&#39;s make a <code>Score.jsx</code> file</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> loadingUrl = <span class=\"hljs-string\">&quot;/images/loading.webp&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Score</span>(<span class=\"hljs-params\">{\n  isPending,\n  home,\n  away,\n  awayName,\n  homeName,\n  awayImage,\n  homeImage,\n}</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;score&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{isPending ? &quot;HOME&quot; : homeName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{isPending ? &quot;–&quot; : home}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{isPending</span> ? <span class=\"hljs-attr\">loadingUrl</span> <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">homeImage</span>} <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;home team logo&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{isPending ? &quot;AWAY&quot; : awayName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{isPending ? &quot;–&quot; : away}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{isPending</span> ? <span class=\"hljs-attr\">loadingUrl</span> <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">awayImage</span>} <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;away team logo&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><ul>\n<li>Key here is that if the score is pending, we show a dash. That will visually indicate to the user we haven&#39;t loaded it yet.</li>\n</ul>\n<p>Okay, let&#39;s make a quick function fetch from the API. Make a file called <code>getScore.js</code></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getScore</span>(<span class=\"hljs-params\">game</span>) {\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&quot;/score?game=&quot;</span> + game);\n  <span class=\"hljs-keyword\">const</span> score = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n  <span class=\"hljs-keyword\">return</span> score;\n}\n</code></pre><p>No surprises here.</p>\n<p>Let&#39;s go modify our <code>App.jsx</code>. Put this in there</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Score</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Score&quot;</span>;\n<span class=\"hljs-keyword\">import</span> getScore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./getScore&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [isPending, setIsPending] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> [game, setGame] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">const</span> [score, setScore] = <span class=\"hljs-title function_\">useState</span>({ <span class=\"hljs-attr\">home</span>: <span class=\"hljs-string\">&quot;–&quot;</span>, <span class=\"hljs-attr\">away</span>: <span class=\"hljs-string\">&quot;–&quot;</span> });\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getNewScore</span>(<span class=\"hljs-params\">game</span>) {\n    <span class=\"hljs-title function_\">setIsPending</span>(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-title function_\">setGame</span>(game);\n    <span class=\"hljs-keyword\">const</span> newScore = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getScore</span>(game);\n    <span class=\"hljs-title function_\">setScore</span>(newScore);\n    <span class=\"hljs-title function_\">setIsPending</span>(<span class=\"hljs-literal\">false</span>);\n  }\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">getNewScore</span>(game);\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Game {game}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>\n        <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{isPending}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> {\n          getNewScore(e.target.value);\n        }}\n      &gt;\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{1}</span>&gt;</span>Game 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{2}</span>&gt;</span>Game 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{3}</span>&gt;</span>Game 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{4}</span>&gt;</span>Game 4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{5}</span>&gt;</span>Game 5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{6}</span>&gt;</span>Game 6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{7}</span>&gt;</span>Game 7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">loading-container</span> ${<span class=\"hljs-attr\">isPending</span> ? &quot;<span class=\"hljs-attr\">loading</span>&quot; <span class=\"hljs-attr\">:</span> &quot;&quot;}`}&gt;</span>\n        {&quot; &quot;}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;spinner&quot;</span>&gt;</span>⚽️<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Score</span>\n          <span class=\"hljs-attr\">isPending</span>=<span class=\"hljs-string\">{isPending}</span>\n          <span class=\"hljs-attr\">homeImage</span>=<span class=\"hljs-string\">{score.homeImage}</span>\n          <span class=\"hljs-attr\">homeName</span>=<span class=\"hljs-string\">{score.homeName}</span>\n          <span class=\"hljs-attr\">awayImage</span>=<span class=\"hljs-string\">{score.awayImage}</span>\n          <span class=\"hljs-attr\">awayName</span>=<span class=\"hljs-string\">{score.awayName}</span>\n          <span class=\"hljs-attr\">home</span>=<span class=\"hljs-string\">{score.home}</span>\n          <span class=\"hljs-attr\">away</span>=<span class=\"hljs-string\">{score.away}</span>\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre><ul>\n<li>So this works, and this is how most people would have coded this - just wait until the API request finishes.</li>\n<li>Why do we need to disable the select while stuff is loading? Because if we don&#39;t people can make multiple requests in that time, and they&#39;ll return in a jumbled order and it&#39;ll freak people out. We have to make sure it finishes it first so we don&#39;t have a UI that&#39;s responding to old requests.</li>\n</ul>\n","markdown":"\nLet's first make this \"wrong\" first - the problem where the UI locks up during transitional times.\n\nLet's make a `Score.jsx` file\n\n```javascript\nconst loadingUrl = \"/images/loading.webp\";\nexport default function Score({\n  isPending,\n  home,\n  away,\n  awayName,\n  homeName,\n  awayImage,\n  homeImage,\n}) {\n  return (\n    <div className=\"score\">\n      <div>\n        <h2>{isPending ? \"HOME\" : homeName}</h2>\n        <h3>{isPending ? \"–\" : home}</h3>\n        <img src={isPending ? loadingUrl : homeImage} alt=\"home team logo\" />\n      </div>\n      <div>\n        <h2>{isPending ? \"AWAY\" : awayName}</h2>\n        <h3>{isPending ? \"–\" : away}</h3>\n        <img src={isPending ? loadingUrl : awayImage} alt=\"away team logo\" />\n      </div>\n    </div>\n  );\n}\n```\n\n- Key here is that if the score is pending, we show a dash. That will visually indicate to the user we haven't loaded it yet.\n\nOkay, let's make a quick function fetch from the API. Make a file called `getScore.js`\n\n```javascript\nexport default async function getScore(game) {\n  const response = await fetch(\"/score?game=\" + game);\n  const score = await response.json();\n  return score;\n}\n```\n\nNo surprises here.\n\nLet's go modify our `App.jsx`. Put this in there\n\n```javascript\nimport { useState, useEffect } from \"react\";\nimport Score from \"./Score\";\nimport getScore from \"./getScore\";\n\nexport default function App() {\n  const [isPending, setIsPending] = useState(true);\n  const [game, setGame] = useState(1);\n  const [score, setScore] = useState({ home: \"–\", away: \"–\" });\n\n  async function getNewScore(game) {\n    setIsPending(true);\n    setGame(game);\n    const newScore = await getScore(game);\n    setScore(newScore);\n    setIsPending(false);\n  }\n\n  useEffect(() => {\n    getNewScore(game);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Game {game}</h1>\n      <select\n        disabled={isPending}\n        onChange={(e) => {\n          getNewScore(e.target.value);\n        }}\n      >\n        <option value={1}>Game 1</option>\n        <option value={2}>Game 2</option>\n        <option value={3}>Game 3</option>\n        <option value={4}>Game 4</option>\n        <option value={5}>Game 5</option>\n        <option value={6}>Game 6</option>\n        <option value={7}>Game 7</option>\n      </select>\n      <div className={`loading-container ${isPending ? \"loading\" : \"\"}`}>\n        {\" \"}\n        <span className=\"spinner\">⚽️</span>\n      </div>\n      <div>\n        <Score\n          isPending={isPending}\n          homeImage={score.homeImage}\n          homeName={score.homeName}\n          awayImage={score.awayImage}\n          awayName={score.awayName}\n          home={score.home}\n          away={score.away}\n        />\n      </div>\n    </div>\n  );\n}\n```\n\n- So this works, and this is how most people would have coded this - just wait until the API request finishes.\n- Why do we need to disable the select while stuff is loading? Because if we don't people can make multiple requests in that time, and they'll return in a jumbled order and it'll freak people out. We have to make sure it finishes it first so we don't have a UI that's responding to old requests.\n","slug":"making-it-work-without-transitions","title":"Making It Work without Transitions","section":"Transitions","icon":"shuffle","filePath":"/home/runner/work/intermediate-react-v6/intermediate-react-v6/lessons/06-transitions/C-making-it-work-without-transitions.md","nextSlug":"/lessons/transitions/making-it-work-with-transitions","prevSlug":"/lessons/transitions/the-project"}},"__N_SSG":true}