{"pageProps":{"post":{"attributes":{"title":"useOptimistic Hook","description":"Discover how optimistic UI updates in messaging apps like iMessage or WhatsApp give users immediate visual feedback before a message is truly sent. Learn with Brian Holt in the Intermediate React v6 course for Frontend Masters, focusing on using React Server Components and hooks like useOptimistic and useTransition for seamless web development.","keywords":["optimistic UI","React","useOptimistic","useTransition","Brian Holt","Frontend Masters","web development"]},"html":"<p>Let&#39;s refactor to use transitions and <code>useOptimistic</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// at the top</span>\n<span class=\"hljs-keyword\">import</span> { useEffect, useOptimistic, useState, useTransition } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-comment\">// add new hooks to top of render function</span>\n<span class=\"hljs-keyword\">const</span> [isPending, startTransition] = <span class=\"hljs-title function_\">useTransition</span>(); <span class=\"hljs-comment\">// we don&#x27;t actually need isPending here today</span>\n<span class=\"hljs-keyword\">const</span> [optimisticThoughts, addOptimisticThought] = <span class=\"hljs-title function_\">useOptimistic</span>(\n  thoughts,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">oldThoughts, newThought</span>) =&gt;</span> [newThought, ...oldThoughts]\n);\n\n<span class=\"hljs-comment\">// inside postDeepThought</span>\n<span class=\"hljs-title function_\">startTransition</span>(<span class=\"hljs-title function_\">async</span> () =&gt; {\n  <span class=\"hljs-title function_\">addOptimisticThought</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${thought}</span> (Loading…)`</span>);\n  [...] <span class=\"hljs-comment\">// rest of code</span>\n});\n\n<span class=\"hljs-comment\">// change thoughts rendering to use optimisticThoughts</span>\n{optimisticThoughts.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">thought, index</span>) =&gt;</span> (\n  [...] <span class=\"hljs-comment\">// code</span>\n))}\n</code></pre><ul>\n<li>That&#39;s it! This will now do an optimistic view of the data</li>\n<li>Immediately the user is shown their value plus &quot;Loading&quot; to let them know that their value is loading</li>\n<li>Once it&#39;s done loading, it will replace state which will kick off a new re-render. This will cause the Loading... to stop showing</li>\n<li>Because everything is wrapped in a transition, it&#39;s marked as a low priority re-render which means it&#39;s it easy for high priority re-renders to block this (which is what we want.)</li>\n<li>Error? Great, it will automatically rollback the state to where it was stable without the the optimistic value in there. Easy!</li>\n</ul>\n<p>This is it for optimistic values! Very useful tool for any time you want temporary UI in front of the user. A lot of the edge cases are just handled for you!</p>\n","markdown":"\nLet's refactor to use transitions and `useOptimistic`.\n\n```javascript\n// at the top\nimport { useEffect, useOptimistic, useState, useTransition } from \"react\";\n\n// add new hooks to top of render function\nconst [isPending, startTransition] = useTransition(); // we don't actually need isPending here today\nconst [optimisticThoughts, addOptimisticThought] = useOptimistic(\n  thoughts,\n  (oldThoughts, newThought) => [newThought, ...oldThoughts]\n);\n\n// inside postDeepThought\nstartTransition(async () => {\n  addOptimisticThought(`${thought} (Loading…)`);\n  [...] // rest of code\n});\n\n// change thoughts rendering to use optimisticThoughts\n{optimisticThoughts.map((thought, index) => (\n  [...] // code\n))}\n```\n\n- That's it! This will now do an optimistic view of the data\n- Immediately the user is shown their value plus \"Loading\" to let them know that their value is loading\n- Once it's done loading, it will replace state which will kick off a new re-render. This will cause the Loading... to stop showing\n- Because everything is wrapped in a transition, it's marked as a low priority re-render which means it's it easy for high priority re-renders to block this (which is what we want.)\n- Error? Great, it will automatically rollback the state to where it was stable without the the optimistic value in there. Easy!\n\nThis is it for optimistic values! Very useful tool for any time you want temporary UI in front of the user. A lot of the edge cases are just handled for you!\n","slug":"useOptimistic-Hook","title":"useOptimistic Hook","section":"Optimistic Values","icon":"sun","filePath":"/home/runner/work/intermediate-react-v6/intermediate-react-v6/lessons/07-optimistic-values/C-useOptimistic-Hook.md","nextSlug":"/lessons/deferred-values/what-are-deferred-values","prevSlug":"/lessons/optimistic-values/the-project"}},"__N_SSG":true}